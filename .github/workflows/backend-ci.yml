name: Backend CI

on:
  push:
    branches: [ dev ]

permissions:
  contents: read

jobs:
  build:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Pull Repository
        uses: actions/checkout@v3

      - name: Checkout private tools
        uses: actions/checkout@v3
        with:
          repository: hongmoSung/properties
          token: ${{ secrets.ACTION_TOKEN }}
          path: src/main/resources/properties
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.10.0
        with:
          cache-disabled: true
          arguments: build

  deployment:
    name: CD
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Pull Repository
        uses: actions/checkout@v3

      - name: Checkout private tools
        uses: actions/checkout@v3
        with:
          repository: hongmoSung/properties
          token: ${{ secrets.ACTION_TOKEN }}
          path: src/main/resources/properties
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.10.0
        with:
          arguments: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-backend-ecr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY:latest
          echo "image=$REGISTRY/$REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./src/main/resources/properties/dev-task-definition.json
          container-name: my-backend-contatiner
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: my-ecs-service
          cluster: dev_my_cluster
          wait-for-service-stability: false
